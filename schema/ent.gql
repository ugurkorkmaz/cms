directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Article implements Node {
  """The unique identifier of the entity."""
  id: ID!
  """The article's title."""
  title: String!
  """The article's slug."""
  slug: String!
  """The article's description."""
  description: String
  """The article's content."""
  content: String!
  categories: [Category!]
}
"""A connection to a list of items."""
type ArticleConnection {
  """A list of edges."""
  edges: [ArticleEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ArticleEdge {
  """The item at the end of the edge."""
  node: Article
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Article connections"""
input ArticleOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Articles."""
  field: ArticleOrderField!
}
"""Properties by which Article connections can be ordered."""
enum ArticleOrderField {
  TITLE
  SLUG
  DESCRIPTION
  CONTENT
}
"""
ArticleWhereInput is used for filtering Article objects.
Input was generated by ent.
"""
input ArticleWhereInput {
  not: ArticleWhereInput
  and: [ArticleWhereInput!]
  or: [ArticleWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """title field predicates"""
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """slug field predicates"""
  slug: String
  slugNEQ: String
  slugIn: [String!]
  slugNotIn: [String!]
  slugGT: String
  slugGTE: String
  slugLT: String
  slugLTE: String
  slugContains: String
  slugHasPrefix: String
  slugHasSuffix: String
  slugEqualFold: String
  slugContainsFold: String
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """content field predicates"""
  content: String
  contentNEQ: String
  contentIn: [String!]
  contentNotIn: [String!]
  contentGT: String
  contentGTE: String
  contentLT: String
  contentLTE: String
  contentContains: String
  contentHasPrefix: String
  contentHasSuffix: String
  contentEqualFold: String
  contentContainsFold: String
  """categories edge predicates"""
  hasCategories: Boolean
  hasCategoriesWith: [CategoryWhereInput!]
}
type Category implements Node {
  """The unique identifier of the entity."""
  id: ID!
  """The time when the entity was created."""
  createdAt: Time!
  """The time when the entity was updated."""
  updatedAt: Time!
  """The tag's name."""
  name: String!
  article: [Article!]
}
"""Ordering options for Category connections"""
input CategoryOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Categories."""
  field: CategoryOrderField!
}
"""Properties by which Category connections can be ordered."""
enum CategoryOrderField {
  CREATED_AT
  UPDATED_AT
  NAME
}
"""
CategoryWhereInput is used for filtering Category objects.
Input was generated by ent.
"""
input CategoryWhereInput {
  not: CategoryWhereInput
  and: [CategoryWhereInput!]
  or: [CategoryWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """article edge predicates"""
  hasArticle: Boolean
  hasArticleWith: [ArticleWhereInput!]
}
type Comment implements Node {
  """The unique identifier of the entity."""
  id: ID!
  """The time when the entity was created."""
  createdAt: Time!
  """The comment's content."""
  content: String!
}
"""A connection to a list of items."""
type CommentConnection {
  """A list of edges."""
  edges: [CommentEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type CommentEdge {
  """The item at the end of the edge."""
  node: Comment
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Comment connections"""
input CommentOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Comments."""
  field: CommentOrderField!
}
"""Properties by which Comment connections can be ordered."""
enum CommentOrderField {
  CREATED_AT
  content
}
"""
CommentWhereInput is used for filtering Comment objects.
Input was generated by ent.
"""
input CommentWhereInput {
  not: CommentWhereInput
  and: [CommentWhereInput!]
  or: [CommentWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """content field predicates"""
  content: String
  contentNEQ: String
  contentIn: [String!]
  contentNotIn: [String!]
  contentGT: String
  contentGTE: String
  contentLT: String
  contentLTE: String
  contentContains: String
  contentHasPrefix: String
  contentHasSuffix: String
  contentEqualFold: String
  contentContainsFold: String
}
"""
CreateArticleInput is used for create Article object.
Input was generated by ent.
"""
input CreateArticleInput {
  """The article's title."""
  title: String!
  """The article's slug."""
  slug: String!
  """The article's description."""
  description: String
  """The article's content."""
  content: String!
  categoryIDs: [ID!]
}
"""
CreateCategoryInput is used for create Category object.
Input was generated by ent.
"""
input CreateCategoryInput {
  """The time when the entity was created."""
  createdAt: Time
  """The time when the entity was updated."""
  updatedAt: Time
  """The tag's name."""
  name: String!
  articleIDs: [ID!]
}
"""
CreateCommentInput is used for create Comment object.
Input was generated by ent.
"""
input CreateCommentInput {
  """The time when the entity was created."""
  createdAt: Time
  """The comment's content."""
  content: String!
}
"""
CreateGalleryInput is used for create Gallery object.
Input was generated by ent.
"""
input CreateGalleryInput {
  """The time when the entity was created."""
  createdAt: Time
  """The time when the entity was updated."""
  updatedAt: Time
  """The tag's name."""
  name: String!
}
"""
CreateMetadataInput is used for create Metadata object.
Input was generated by ent.
"""
input CreateMetadataInput {
  """The time when the entity was updated."""
  updatedAt: Time
  """The time when the entity was created."""
  createdAt: Time
  """The website's title."""
  title: String!
}
"""
CreateNewsletterInput is used for create Newsletter object.
Input was generated by ent.
"""
input CreateNewsletterInput {
  """The time when the entity was updated."""
  updatedAt: Time
  """The time when the entity was created."""
  createdAt: Time
  """The newsletter's message."""
  message: String!
}
"""
CreateTagInput is used for create Tag object.
Input was generated by ent.
"""
input CreateTagInput {
  """The time when the entity was created."""
  createdAt: Time
  """The time when the entity was updated."""
  updatedAt: Time
  """The tag's name."""
  name: String!
}
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  """The time when the entity was updated."""
  updatedAt: Time
  """The time when the entity was created."""
  createdAt: Time
  """The user's name."""
  name: String!
  """The user's email."""
  email: String!
  """The user's password."""
  password: String!
  """The user's role."""
  role: UserRole
  """The user's token."""
  token: String
  """The user's token expiration time."""
  tokenExpired: Time
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Gallery implements Node {
  """The unique identifier of the entity."""
  id: ID!
  """The time when the entity was created."""
  createdAt: Time!
  """The time when the entity was updated."""
  updatedAt: Time!
  """The tag's name."""
  name: String!
}
"""A connection to a list of items."""
type GalleryConnection {
  """A list of edges."""
  edges: [GalleryEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type GalleryEdge {
  """The item at the end of the edge."""
  node: Gallery
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Gallery connections"""
input GalleryOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Galleries."""
  field: GalleryOrderField!
}
"""Properties by which Gallery connections can be ordered."""
enum GalleryOrderField {
  CREATED_AT
  UPDATED_AT
  NAME
}
"""
GalleryWhereInput is used for filtering Gallery objects.
Input was generated by ent.
"""
input GalleryWhereInput {
  not: GalleryWhereInput
  and: [GalleryWhereInput!]
  or: [GalleryWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
}
type Metadata implements Node {
  """The unique identifier of the entity."""
  id: ID!
  """The time when the entity was updated."""
  updatedAt: Time!
  """The time when the entity was created."""
  createdAt: Time!
  """The website's title."""
  title: String!
}
"""Ordering options for Metadata connections"""
input MetadataOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order MetadataSlice."""
  field: MetadataOrderField!
}
"""Properties by which Metadata connections can be ordered."""
enum MetadataOrderField {
  UPDATED_AT
  CREATED_AT
  TITLE
}
"""
MetadataWhereInput is used for filtering Metadata objects.
Input was generated by ent.
"""
input MetadataWhereInput {
  not: MetadataWhereInput
  and: [MetadataWhereInput!]
  or: [MetadataWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """title field predicates"""
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
}
type Newsletter implements Node {
  """The unique identifier of the entity."""
  id: ID!
  """The time when the entity was updated."""
  updatedAt: Time!
  """The time when the entity was created."""
  createdAt: Time!
  """The newsletter's message."""
  message: String!
}
"""A connection to a list of items."""
type NewsletterConnection {
  """A list of edges."""
  edges: [NewsletterEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type NewsletterEdge {
  """The item at the end of the edge."""
  node: Newsletter
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Newsletter connections"""
input NewsletterOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Newsletters."""
  field: NewsletterOrderField!
}
"""Properties by which Newsletter connections can be ordered."""
enum NewsletterOrderField {
  UPDATED_AT
  CREATED_AT
  MESSAGE
}
"""
NewsletterWhereInput is used for filtering Newsletter objects.
Input was generated by ent.
"""
input NewsletterWhereInput {
  not: NewsletterWhereInput
  and: [NewsletterWhereInput!]
  or: [NewsletterWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """message field predicates"""
  message: String
  messageNEQ: String
  messageIn: [String!]
  messageNotIn: [String!]
  messageGT: String
  messageGTE: String
  messageLT: String
  messageLTE: String
  messageContains: String
  messageHasPrefix: String
  messageHasSuffix: String
  messageEqualFold: String
  messageContainsFold: String
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "app/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  articles(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Articles returned from the connection."""
    orderBy: ArticleOrder

    """Filtering options for Articles returned from the connection."""
    where: ArticleWhereInput
  ): ArticleConnection!
  categories: [Category!]!
  comments(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Comments returned from the connection."""
    orderBy: CommentOrder

    """Filtering options for Comments returned from the connection."""
    where: CommentWhereInput
  ): CommentConnection!
  galleries(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Galleries returned from the connection."""
    orderBy: GalleryOrder

    """Filtering options for Galleries returned from the connection."""
    where: GalleryWhereInput
  ): GalleryConnection!
  metadata: [Metadata!]!
  newsletters(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Newsletters returned from the connection."""
    orderBy: NewsletterOrder

    """Filtering options for Newsletters returned from the connection."""
    where: NewsletterWhereInput
  ): NewsletterConnection!
  tags: [Tag!]!
  users(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Users returned from the connection."""
    orderBy: UserOrder

    """Filtering options for Users returned from the connection."""
    where: UserWhereInput
  ): UserConnection!
}
type Tag implements Node {
  """The unique identifier of the entity."""
  id: ID!
  """The time when the entity was created."""
  createdAt: Time!
  """The time when the entity was updated."""
  updatedAt: Time!
  """The tag's name."""
  name: String!
}
"""Ordering options for Tag connections"""
input TagOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Tags."""
  field: TagOrderField!
}
"""Properties by which Tag connections can be ordered."""
enum TagOrderField {
  CREATED_AT
  UPDATED_AT
  NAME
}
"""
TagWhereInput is used for filtering Tag objects.
Input was generated by ent.
"""
input TagWhereInput {
  not: TagWhereInput
  and: [TagWhereInput!]
  or: [TagWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
}
"""The builtin Time type"""
scalar Time
"""
UpdateArticleInput is used for update Article object.
Input was generated by ent.
"""
input UpdateArticleInput {
  """The article's title."""
  title: String
  """The article's slug."""
  slug: String
  """The article's description."""
  description: String
  clearDescription: Boolean
  """The article's content."""
  content: String
  addCategoryIDs: [ID!]
  removeCategoryIDs: [ID!]
  clearCategories: Boolean
}
"""
UpdateCategoryInput is used for update Category object.
Input was generated by ent.
"""
input UpdateCategoryInput {
  """The time when the entity was updated."""
  updatedAt: Time
  """The tag's name."""
  name: String
  addArticleIDs: [ID!]
  removeArticleIDs: [ID!]
  clearArticle: Boolean
}
"""
UpdateCommentInput is used for update Comment object.
Input was generated by ent.
"""
input UpdateCommentInput {
  """The comment's content."""
  content: String
}
"""
UpdateGalleryInput is used for update Gallery object.
Input was generated by ent.
"""
input UpdateGalleryInput {
  """The time when the entity was updated."""
  updatedAt: Time
  """The tag's name."""
  name: String
}
"""
UpdateMetadataInput is used for update Metadata object.
Input was generated by ent.
"""
input UpdateMetadataInput {
  """The time when the entity was updated."""
  updatedAt: Time
  """The website's title."""
  title: String
}
"""
UpdateNewsletterInput is used for update Newsletter object.
Input was generated by ent.
"""
input UpdateNewsletterInput {
  """The time when the entity was updated."""
  updatedAt: Time
  """The newsletter's message."""
  message: String
}
"""
UpdateTagInput is used for update Tag object.
Input was generated by ent.
"""
input UpdateTagInput {
  """The time when the entity was updated."""
  updatedAt: Time
  """The tag's name."""
  name: String
}
"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  """The time when the entity was updated."""
  updatedAt: Time
  """The user's name."""
  name: String
  """The user's password."""
  password: String
  """The user's role."""
  role: UserRole
  """The user's token."""
  token: String
  clearToken: Boolean
  """The user's token expiration time."""
  tokenExpired: Time
  clearTokenExpired: Boolean
}
type User implements Node {
  """The unique identifier of the entity."""
  id: ID!
  """The time when the entity was updated."""
  updatedAt: Time!
  """The time when the entity was created."""
  createdAt: Time!
  """The user's name."""
  name: String!
  """The user's email."""
  email: String!
  """The user's role."""
  role: UserRole!
  """The user's token expiration time."""
  tokenExpired: Time
}
"""A connection to a list of items."""
type UserConnection {
  """A list of edges."""
  edges: [UserEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for User connections"""
input UserOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Users."""
  field: UserOrderField!
}
"""Properties by which User connections can be ordered."""
enum UserOrderField {
  UPDATED_AT
  CREATED_AT
  NAME
  EMAIL
  ROLE
  TOKEN
  TOKEN_EXPIRED
}
"""UserRole is enum for the field role"""
enum UserRole @goModel(model: "app/ent/user.Role") {
  admin
  author
  user
  subscriber
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """email field predicates"""
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailEqualFold: String
  emailContainsFold: String
  """role field predicates"""
  role: UserRole
  roleNEQ: UserRole
  roleIn: [UserRole!]
  roleNotIn: [UserRole!]
  """token_expired field predicates"""
  tokenExpired: Time
  tokenExpiredNEQ: Time
  tokenExpiredIn: [Time!]
  tokenExpiredNotIn: [Time!]
  tokenExpiredGT: Time
  tokenExpiredGTE: Time
  tokenExpiredLT: Time
  tokenExpiredLTE: Time
  tokenExpiredIsNil: Boolean
  tokenExpiredNotNil: Boolean
}
