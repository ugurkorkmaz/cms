// Code generated by ent, DO NOT EDIT.

package ent

import (
	"app/ent/article"
	"app/ent/comment"
	"app/ent/meta"
	"app/ent/newsletter"
	"app/ent/user"
	"context"
	"encoding/base64"
	"errors"
	"fmt"
	"io"
	"strconv"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/google/uuid"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"github.com/vmihailenco/msgpack/v5"
)

// OrderDirection defines the directions in which to order a list of items.
type OrderDirection string

const (
	// OrderDirectionAsc specifies an ascending order.
	OrderDirectionAsc OrderDirection = "ASC"
	// OrderDirectionDesc specifies a descending order.
	OrderDirectionDesc OrderDirection = "DESC"
)

// Validate the order direction value.
func (o OrderDirection) Validate() error {
	if o != OrderDirectionAsc && o != OrderDirectionDesc {
		return fmt.Errorf("%s is not a valid OrderDirection", o)
	}
	return nil
}

// String implements fmt.Stringer interface.
func (o OrderDirection) String() string {
	return string(o)
}

// MarshalGQL implements graphql.Marshaler interface.
func (o OrderDirection) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(o.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (o *OrderDirection) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("order direction %T must be a string", val)
	}
	*o = OrderDirection(str)
	return o.Validate()
}

func (o OrderDirection) reverse() OrderDirection {
	if o == OrderDirectionDesc {
		return OrderDirectionAsc
	}
	return OrderDirectionDesc
}

func (o OrderDirection) orderFunc(field string) OrderFunc {
	if o == OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

func cursorsToPredicates(direction OrderDirection, after, before *Cursor, field, idField string) []func(s *sql.Selector) {
	var predicates []func(s *sql.Selector)
	if after != nil {
		if after.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeGT
			} else {
				predicate = sql.CompositeLT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					after.Value, after.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.GT
			} else {
				predicate = sql.LT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					after.ID,
				))
			})
		}
	}
	if before != nil {
		if before.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeLT
			} else {
				predicate = sql.CompositeGT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					before.Value, before.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.LT
			} else {
				predicate = sql.GT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					before.ID,
				))
			})
		}
	}
	return predicates
}

// PageInfo of a connection type.
type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *Cursor `json:"startCursor"`
	EndCursor       *Cursor `json:"endCursor"`
}

// Cursor of an edge type.
type Cursor struct {
	ID    uuid.UUID `msgpack:"i"`
	Value Value     `msgpack:"v,omitempty"`
}

// MarshalGQL implements graphql.Marshaler interface.
func (c Cursor) MarshalGQL(w io.Writer) {
	quote := []byte{'"'}
	w.Write(quote)
	defer w.Write(quote)
	wc := base64.NewEncoder(base64.RawStdEncoding, w)
	defer wc.Close()
	_ = msgpack.NewEncoder(wc).Encode(c)
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (c *Cursor) UnmarshalGQL(v interface{}) error {
	s, ok := v.(string)
	if !ok {
		return fmt.Errorf("%T is not a string", v)
	}
	if err := msgpack.NewDecoder(
		base64.NewDecoder(
			base64.RawStdEncoding,
			strings.NewReader(s),
		),
	).Decode(c); err != nil {
		return fmt.Errorf("cannot decode cursor: %w", err)
	}
	return nil
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// ArticleEdge is the edge representation of Article.
type ArticleEdge struct {
	Node   *Article `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// ArticleConnection is the connection containing edges to Article.
type ArticleConnection struct {
	Edges      []*ArticleEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

func (c *ArticleConnection) build(nodes []*Article, pager *articlePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Article
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Article {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Article {
			return nodes[i]
		}
	}
	c.Edges = make([]*ArticleEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ArticleEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ArticlePaginateOption enables pagination customization.
type ArticlePaginateOption func(*articlePager) error

// WithArticleOrder configures pagination ordering.
func WithArticleOrder(order *ArticleOrder) ArticlePaginateOption {
	if order == nil {
		order = DefaultArticleOrder
	}
	o := *order
	return func(pager *articlePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultArticleOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithArticleFilter configures pagination filter.
func WithArticleFilter(filter func(*ArticleQuery) (*ArticleQuery, error)) ArticlePaginateOption {
	return func(pager *articlePager) error {
		if filter == nil {
			return errors.New("ArticleQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type articlePager struct {
	order  *ArticleOrder
	filter func(*ArticleQuery) (*ArticleQuery, error)
}

func newArticlePager(opts []ArticlePaginateOption) (*articlePager, error) {
	pager := &articlePager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultArticleOrder
	}
	return pager, nil
}

func (p *articlePager) applyFilter(query *ArticleQuery) (*ArticleQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *articlePager) toCursor(a *Article) Cursor {
	return p.order.Field.toCursor(a)
}

func (p *articlePager) applyCursors(query *ArticleQuery, after, before *Cursor) *ArticleQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultArticleOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *articlePager) applyOrder(query *ArticleQuery, reverse bool) *ArticleQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultArticleOrder.Field {
		query = query.Order(direction.orderFunc(DefaultArticleOrder.Field.field))
	}
	return query
}

func (p *articlePager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultArticleOrder.Field {
			b.Comma().Ident(DefaultArticleOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Article.
func (a *ArticleQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ArticlePaginateOption,
) (*ArticleConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newArticlePager(opts)
	if err != nil {
		return nil, err
	}
	if a, err = pager.applyFilter(a); err != nil {
		return nil, err
	}
	conn := &ArticleConnection{Edges: []*ArticleEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = a.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	a = pager.applyCursors(a, after, before)
	a = pager.applyOrder(a, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		a.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := a.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := a.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// ArticleOrderFieldUpdatedAt orders Article by updated_at.
	ArticleOrderFieldUpdatedAt = &ArticleOrderField{
		field: article.FieldUpdatedAt,
		toCursor: func(a *Article) Cursor {
			return Cursor{
				ID:    a.ID,
				Value: a.UpdatedAt,
			}
		},
	}
	// ArticleOrderFieldCreatedAt orders Article by created_at.
	ArticleOrderFieldCreatedAt = &ArticleOrderField{
		field: article.FieldCreatedAt,
		toCursor: func(a *Article) Cursor {
			return Cursor{
				ID:    a.ID,
				Value: a.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f ArticleOrderField) String() string {
	var str string
	switch f.field {
	case article.FieldUpdatedAt:
		str = "UPDATED_AT"
	case article.FieldCreatedAt:
		str = "CREATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f ArticleOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *ArticleOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("ArticleOrderField %T must be a string", v)
	}
	switch str {
	case "UPDATED_AT":
		*f = *ArticleOrderFieldUpdatedAt
	case "CREATED_AT":
		*f = *ArticleOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid ArticleOrderField", str)
	}
	return nil
}

// ArticleOrderField defines the ordering field of Article.
type ArticleOrderField struct {
	field    string
	toCursor func(*Article) Cursor
}

// ArticleOrder defines the ordering of Article.
type ArticleOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *ArticleOrderField `json:"field"`
}

// DefaultArticleOrder is the default ordering of Article.
var DefaultArticleOrder = &ArticleOrder{
	Direction: OrderDirectionAsc,
	Field: &ArticleOrderField{
		field: article.FieldID,
		toCursor: func(a *Article) Cursor {
			return Cursor{ID: a.ID}
		},
	},
}

// ToEdge converts Article into ArticleEdge.
func (a *Article) ToEdge(order *ArticleOrder) *ArticleEdge {
	if order == nil {
		order = DefaultArticleOrder
	}
	return &ArticleEdge{
		Node:   a,
		Cursor: order.Field.toCursor(a),
	}
}

// CommentEdge is the edge representation of Comment.
type CommentEdge struct {
	Node   *Comment `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// CommentConnection is the connection containing edges to Comment.
type CommentConnection struct {
	Edges      []*CommentEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

func (c *CommentConnection) build(nodes []*Comment, pager *commentPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Comment
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Comment {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Comment {
			return nodes[i]
		}
	}
	c.Edges = make([]*CommentEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &CommentEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// CommentPaginateOption enables pagination customization.
type CommentPaginateOption func(*commentPager) error

// WithCommentOrder configures pagination ordering.
func WithCommentOrder(order *CommentOrder) CommentPaginateOption {
	if order == nil {
		order = DefaultCommentOrder
	}
	o := *order
	return func(pager *commentPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultCommentOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithCommentFilter configures pagination filter.
func WithCommentFilter(filter func(*CommentQuery) (*CommentQuery, error)) CommentPaginateOption {
	return func(pager *commentPager) error {
		if filter == nil {
			return errors.New("CommentQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type commentPager struct {
	order  *CommentOrder
	filter func(*CommentQuery) (*CommentQuery, error)
}

func newCommentPager(opts []CommentPaginateOption) (*commentPager, error) {
	pager := &commentPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultCommentOrder
	}
	return pager, nil
}

func (p *commentPager) applyFilter(query *CommentQuery) (*CommentQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *commentPager) toCursor(c *Comment) Cursor {
	return p.order.Field.toCursor(c)
}

func (p *commentPager) applyCursors(query *CommentQuery, after, before *Cursor) *CommentQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultCommentOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *commentPager) applyOrder(query *CommentQuery, reverse bool) *CommentQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultCommentOrder.Field {
		query = query.Order(direction.orderFunc(DefaultCommentOrder.Field.field))
	}
	return query
}

func (p *commentPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultCommentOrder.Field {
			b.Comma().Ident(DefaultCommentOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Comment.
func (c *CommentQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...CommentPaginateOption,
) (*CommentConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newCommentPager(opts)
	if err != nil {
		return nil, err
	}
	if c, err = pager.applyFilter(c); err != nil {
		return nil, err
	}
	conn := &CommentConnection{Edges: []*CommentEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = c.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	c = pager.applyCursors(c, after, before)
	c = pager.applyOrder(c, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		c.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := c.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := c.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// CommentOrderFieldUpdatedAt orders Comment by updated_at.
	CommentOrderFieldUpdatedAt = &CommentOrderField{
		field: comment.FieldUpdatedAt,
		toCursor: func(c *Comment) Cursor {
			return Cursor{
				ID:    c.ID,
				Value: c.UpdatedAt,
			}
		},
	}
	// CommentOrderFieldCreatedAt orders Comment by created_at.
	CommentOrderFieldCreatedAt = &CommentOrderField{
		field: comment.FieldCreatedAt,
		toCursor: func(c *Comment) Cursor {
			return Cursor{
				ID:    c.ID,
				Value: c.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f CommentOrderField) String() string {
	var str string
	switch f.field {
	case comment.FieldUpdatedAt:
		str = "UPDATED_AT"
	case comment.FieldCreatedAt:
		str = "CREATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f CommentOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *CommentOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("CommentOrderField %T must be a string", v)
	}
	switch str {
	case "UPDATED_AT":
		*f = *CommentOrderFieldUpdatedAt
	case "CREATED_AT":
		*f = *CommentOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid CommentOrderField", str)
	}
	return nil
}

// CommentOrderField defines the ordering field of Comment.
type CommentOrderField struct {
	field    string
	toCursor func(*Comment) Cursor
}

// CommentOrder defines the ordering of Comment.
type CommentOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *CommentOrderField `json:"field"`
}

// DefaultCommentOrder is the default ordering of Comment.
var DefaultCommentOrder = &CommentOrder{
	Direction: OrderDirectionAsc,
	Field: &CommentOrderField{
		field: comment.FieldID,
		toCursor: func(c *Comment) Cursor {
			return Cursor{ID: c.ID}
		},
	},
}

// ToEdge converts Comment into CommentEdge.
func (c *Comment) ToEdge(order *CommentOrder) *CommentEdge {
	if order == nil {
		order = DefaultCommentOrder
	}
	return &CommentEdge{
		Node:   c,
		Cursor: order.Field.toCursor(c),
	}
}

// MetaEdge is the edge representation of Meta.
type MetaEdge struct {
	Node   *Meta  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// MetaConnection is the connection containing edges to Meta.
type MetaConnection struct {
	Edges      []*MetaEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *MetaConnection) build(nodes []*Meta, pager *metaPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Meta
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Meta {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Meta {
			return nodes[i]
		}
	}
	c.Edges = make([]*MetaEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &MetaEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// MetaPaginateOption enables pagination customization.
type MetaPaginateOption func(*metaPager) error

// WithMetaOrder configures pagination ordering.
func WithMetaOrder(order *MetaOrder) MetaPaginateOption {
	if order == nil {
		order = DefaultMetaOrder
	}
	o := *order
	return func(pager *metaPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultMetaOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithMetaFilter configures pagination filter.
func WithMetaFilter(filter func(*MetaQuery) (*MetaQuery, error)) MetaPaginateOption {
	return func(pager *metaPager) error {
		if filter == nil {
			return errors.New("MetaQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type metaPager struct {
	order  *MetaOrder
	filter func(*MetaQuery) (*MetaQuery, error)
}

func newMetaPager(opts []MetaPaginateOption) (*metaPager, error) {
	pager := &metaPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultMetaOrder
	}
	return pager, nil
}

func (p *metaPager) applyFilter(query *MetaQuery) (*MetaQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *metaPager) toCursor(m *Meta) Cursor {
	return p.order.Field.toCursor(m)
}

func (p *metaPager) applyCursors(query *MetaQuery, after, before *Cursor) *MetaQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultMetaOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *metaPager) applyOrder(query *MetaQuery, reverse bool) *MetaQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultMetaOrder.Field {
		query = query.Order(direction.orderFunc(DefaultMetaOrder.Field.field))
	}
	return query
}

func (p *metaPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultMetaOrder.Field {
			b.Comma().Ident(DefaultMetaOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Meta.
func (m *MetaQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...MetaPaginateOption,
) (*MetaConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newMetaPager(opts)
	if err != nil {
		return nil, err
	}
	if m, err = pager.applyFilter(m); err != nil {
		return nil, err
	}
	conn := &MetaConnection{Edges: []*MetaEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = m.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	m = pager.applyCursors(m, after, before)
	m = pager.applyOrder(m, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		m.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := m.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := m.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// MetaOrderFieldUpdatedAt orders Meta by updated_at.
	MetaOrderFieldUpdatedAt = &MetaOrderField{
		field: meta.FieldUpdatedAt,
		toCursor: func(m *Meta) Cursor {
			return Cursor{
				ID:    m.ID,
				Value: m.UpdatedAt,
			}
		},
	}
	// MetaOrderFieldCreatedAt orders Meta by created_at.
	MetaOrderFieldCreatedAt = &MetaOrderField{
		field: meta.FieldCreatedAt,
		toCursor: func(m *Meta) Cursor {
			return Cursor{
				ID:    m.ID,
				Value: m.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f MetaOrderField) String() string {
	var str string
	switch f.field {
	case meta.FieldUpdatedAt:
		str = "UPDATED_AT"
	case meta.FieldCreatedAt:
		str = "CREATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f MetaOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *MetaOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("MetaOrderField %T must be a string", v)
	}
	switch str {
	case "UPDATED_AT":
		*f = *MetaOrderFieldUpdatedAt
	case "CREATED_AT":
		*f = *MetaOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid MetaOrderField", str)
	}
	return nil
}

// MetaOrderField defines the ordering field of Meta.
type MetaOrderField struct {
	field    string
	toCursor func(*Meta) Cursor
}

// MetaOrder defines the ordering of Meta.
type MetaOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *MetaOrderField `json:"field"`
}

// DefaultMetaOrder is the default ordering of Meta.
var DefaultMetaOrder = &MetaOrder{
	Direction: OrderDirectionAsc,
	Field: &MetaOrderField{
		field: meta.FieldID,
		toCursor: func(m *Meta) Cursor {
			return Cursor{ID: m.ID}
		},
	},
}

// ToEdge converts Meta into MetaEdge.
func (m *Meta) ToEdge(order *MetaOrder) *MetaEdge {
	if order == nil {
		order = DefaultMetaOrder
	}
	return &MetaEdge{
		Node:   m,
		Cursor: order.Field.toCursor(m),
	}
}

// NewsletterEdge is the edge representation of Newsletter.
type NewsletterEdge struct {
	Node   *Newsletter `json:"node"`
	Cursor Cursor      `json:"cursor"`
}

// NewsletterConnection is the connection containing edges to Newsletter.
type NewsletterConnection struct {
	Edges      []*NewsletterEdge `json:"edges"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

func (c *NewsletterConnection) build(nodes []*Newsletter, pager *newsletterPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Newsletter
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Newsletter {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Newsletter {
			return nodes[i]
		}
	}
	c.Edges = make([]*NewsletterEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &NewsletterEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// NewsletterPaginateOption enables pagination customization.
type NewsletterPaginateOption func(*newsletterPager) error

// WithNewsletterOrder configures pagination ordering.
func WithNewsletterOrder(order *NewsletterOrder) NewsletterPaginateOption {
	if order == nil {
		order = DefaultNewsletterOrder
	}
	o := *order
	return func(pager *newsletterPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultNewsletterOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithNewsletterFilter configures pagination filter.
func WithNewsletterFilter(filter func(*NewsletterQuery) (*NewsletterQuery, error)) NewsletterPaginateOption {
	return func(pager *newsletterPager) error {
		if filter == nil {
			return errors.New("NewsletterQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type newsletterPager struct {
	order  *NewsletterOrder
	filter func(*NewsletterQuery) (*NewsletterQuery, error)
}

func newNewsletterPager(opts []NewsletterPaginateOption) (*newsletterPager, error) {
	pager := &newsletterPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultNewsletterOrder
	}
	return pager, nil
}

func (p *newsletterPager) applyFilter(query *NewsletterQuery) (*NewsletterQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *newsletterPager) toCursor(n *Newsletter) Cursor {
	return p.order.Field.toCursor(n)
}

func (p *newsletterPager) applyCursors(query *NewsletterQuery, after, before *Cursor) *NewsletterQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultNewsletterOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *newsletterPager) applyOrder(query *NewsletterQuery, reverse bool) *NewsletterQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultNewsletterOrder.Field {
		query = query.Order(direction.orderFunc(DefaultNewsletterOrder.Field.field))
	}
	return query
}

func (p *newsletterPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultNewsletterOrder.Field {
			b.Comma().Ident(DefaultNewsletterOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Newsletter.
func (n *NewsletterQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...NewsletterPaginateOption,
) (*NewsletterConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newNewsletterPager(opts)
	if err != nil {
		return nil, err
	}
	if n, err = pager.applyFilter(n); err != nil {
		return nil, err
	}
	conn := &NewsletterConnection{Edges: []*NewsletterEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = n.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	n = pager.applyCursors(n, after, before)
	n = pager.applyOrder(n, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		n.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := n.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := n.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// NewsletterOrderFieldUpdatedAt orders Newsletter by updated_at.
	NewsletterOrderFieldUpdatedAt = &NewsletterOrderField{
		field: newsletter.FieldUpdatedAt,
		toCursor: func(n *Newsletter) Cursor {
			return Cursor{
				ID:    n.ID,
				Value: n.UpdatedAt,
			}
		},
	}
	// NewsletterOrderFieldCreatedAt orders Newsletter by created_at.
	NewsletterOrderFieldCreatedAt = &NewsletterOrderField{
		field: newsletter.FieldCreatedAt,
		toCursor: func(n *Newsletter) Cursor {
			return Cursor{
				ID:    n.ID,
				Value: n.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f NewsletterOrderField) String() string {
	var str string
	switch f.field {
	case newsletter.FieldUpdatedAt:
		str = "UPDATED_AT"
	case newsletter.FieldCreatedAt:
		str = "CREATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f NewsletterOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *NewsletterOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("NewsletterOrderField %T must be a string", v)
	}
	switch str {
	case "UPDATED_AT":
		*f = *NewsletterOrderFieldUpdatedAt
	case "CREATED_AT":
		*f = *NewsletterOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid NewsletterOrderField", str)
	}
	return nil
}

// NewsletterOrderField defines the ordering field of Newsletter.
type NewsletterOrderField struct {
	field    string
	toCursor func(*Newsletter) Cursor
}

// NewsletterOrder defines the ordering of Newsletter.
type NewsletterOrder struct {
	Direction OrderDirection        `json:"direction"`
	Field     *NewsletterOrderField `json:"field"`
}

// DefaultNewsletterOrder is the default ordering of Newsletter.
var DefaultNewsletterOrder = &NewsletterOrder{
	Direction: OrderDirectionAsc,
	Field: &NewsletterOrderField{
		field: newsletter.FieldID,
		toCursor: func(n *Newsletter) Cursor {
			return Cursor{ID: n.ID}
		},
	},
}

// ToEdge converts Newsletter into NewsletterEdge.
func (n *Newsletter) ToEdge(order *NewsletterOrder) *NewsletterEdge {
	if order == nil {
		order = DefaultNewsletterOrder
	}
	return &NewsletterEdge{
		Node:   n,
		Cursor: order.Field.toCursor(n),
	}
}

// UserEdge is the edge representation of User.
type UserEdge struct {
	Node   *User  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// UserConnection is the connection containing edges to User.
type UserConnection struct {
	Edges      []*UserEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *UserConnection) build(nodes []*User, pager *userPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *User
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *User {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *User {
			return nodes[i]
		}
	}
	c.Edges = make([]*UserEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &UserEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// UserPaginateOption enables pagination customization.
type UserPaginateOption func(*userPager) error

// WithUserOrder configures pagination ordering.
func WithUserOrder(order *UserOrder) UserPaginateOption {
	if order == nil {
		order = DefaultUserOrder
	}
	o := *order
	return func(pager *userPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultUserOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithUserFilter configures pagination filter.
func WithUserFilter(filter func(*UserQuery) (*UserQuery, error)) UserPaginateOption {
	return func(pager *userPager) error {
		if filter == nil {
			return errors.New("UserQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type userPager struct {
	order  *UserOrder
	filter func(*UserQuery) (*UserQuery, error)
}

func newUserPager(opts []UserPaginateOption) (*userPager, error) {
	pager := &userPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultUserOrder
	}
	return pager, nil
}

func (p *userPager) applyFilter(query *UserQuery) (*UserQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *userPager) toCursor(u *User) Cursor {
	return p.order.Field.toCursor(u)
}

func (p *userPager) applyCursors(query *UserQuery, after, before *Cursor) *UserQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultUserOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *userPager) applyOrder(query *UserQuery, reverse bool) *UserQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultUserOrder.Field {
		query = query.Order(direction.orderFunc(DefaultUserOrder.Field.field))
	}
	return query
}

func (p *userPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultUserOrder.Field {
			b.Comma().Ident(DefaultUserOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to User.
func (u *UserQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...UserPaginateOption,
) (*UserConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newUserPager(opts)
	if err != nil {
		return nil, err
	}
	if u, err = pager.applyFilter(u); err != nil {
		return nil, err
	}
	conn := &UserConnection{Edges: []*UserEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = u.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	u = pager.applyCursors(u, after, before)
	u = pager.applyOrder(u, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		u.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := u.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := u.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// UserOrderFieldUpdatedAt orders User by updated_at.
	UserOrderFieldUpdatedAt = &UserOrderField{
		field: user.FieldUpdatedAt,
		toCursor: func(u *User) Cursor {
			return Cursor{
				ID:    u.ID,
				Value: u.UpdatedAt,
			}
		},
	}
	// UserOrderFieldCreatedAt orders User by created_at.
	UserOrderFieldCreatedAt = &UserOrderField{
		field: user.FieldCreatedAt,
		toCursor: func(u *User) Cursor {
			return Cursor{
				ID:    u.ID,
				Value: u.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f UserOrderField) String() string {
	var str string
	switch f.field {
	case user.FieldUpdatedAt:
		str = "UPDATED_AT"
	case user.FieldCreatedAt:
		str = "CREATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f UserOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *UserOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("UserOrderField %T must be a string", v)
	}
	switch str {
	case "UPDATED_AT":
		*f = *UserOrderFieldUpdatedAt
	case "CREATED_AT":
		*f = *UserOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid UserOrderField", str)
	}
	return nil
}

// UserOrderField defines the ordering field of User.
type UserOrderField struct {
	field    string
	toCursor func(*User) Cursor
}

// UserOrder defines the ordering of User.
type UserOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *UserOrderField `json:"field"`
}

// DefaultUserOrder is the default ordering of User.
var DefaultUserOrder = &UserOrder{
	Direction: OrderDirectionAsc,
	Field: &UserOrderField{
		field: user.FieldID,
		toCursor: func(u *User) Cursor {
			return Cursor{ID: u.ID}
		},
	},
}

// ToEdge converts User into UserEdge.
func (u *User) ToEdge(order *UserOrder) *UserEdge {
	if order == nil {
		order = DefaultUserOrder
	}
	return &UserEdge{
		Node:   u,
		Cursor: order.Field.toCursor(u),
	}
}
