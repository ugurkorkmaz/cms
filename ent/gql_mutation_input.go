// Code generated by ent, DO NOT EDIT.

package ent

import (
	"app/ent/user"
	"time"
)

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	UpdatedAt    *time.Time
	CreatedAt    *time.Time
	Name         string
	Email        string
	Password     string
	Role         *user.Role
	Token        *string
	TokenExpired *time.Time
}

// Mutate applies the CreateUserInput on the UserMutation builder.
func (i *CreateUserInput) Mutate(m *UserMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	m.SetName(i.Name)
	m.SetEmail(i.Email)
	m.SetPassword(i.Password)
	if v := i.Role; v != nil {
		m.SetRole(*v)
	}
	if v := i.Token; v != nil {
		m.SetToken(*v)
	}
	if v := i.TokenExpired; v != nil {
		m.SetTokenExpired(*v)
	}
}

// SetInput applies the change-set in the CreateUserInput on the UserCreate builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	UpdatedAt         *time.Time
	Name              *string
	Password          *string
	Role              *user.Role
	ClearToken        bool
	Token             *string
	ClearTokenExpired bool
	TokenExpired      *time.Time
}

// Mutate applies the UpdateUserInput on the UserMutation builder.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Password; v != nil {
		m.SetPassword(*v)
	}
	if v := i.Role; v != nil {
		m.SetRole(*v)
	}
	if i.ClearToken {
		m.ClearToken()
	}
	if v := i.Token; v != nil {
		m.SetToken(*v)
	}
	if i.ClearTokenExpired {
		m.ClearTokenExpired()
	}
	if v := i.TokenExpired; v != nil {
		m.SetTokenExpired(*v)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdate builder.
func (c *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdateOne builder.
func (c *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
