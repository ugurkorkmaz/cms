// Code generated by ent, DO NOT EDIT.

package ent

import (
	"app/ent/article"
	"app/ent/comment"
	"app/ent/meta"
	"app/ent/newsletter"
	"app/ent/schema"
	"app/ent/user"
	"time"

	"github.com/google/uuid"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	articleMixin := schema.Article{}.Mixin()
	articleMixinFields0 := articleMixin[0].Fields()
	_ = articleMixinFields0
	articleMixinFields1 := articleMixin[1].Fields()
	_ = articleMixinFields1
	articleMixinFields2 := articleMixin[2].Fields()
	_ = articleMixinFields2
	articleFields := schema.Article{}.Fields()
	_ = articleFields
	// articleDescUpdatedAt is the schema descriptor for updated_at field.
	articleDescUpdatedAt := articleMixinFields1[0].Descriptor()
	// article.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	article.DefaultUpdatedAt = articleDescUpdatedAt.Default.(func() time.Time)
	// article.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	article.UpdateDefaultUpdatedAt = articleDescUpdatedAt.UpdateDefault.(func() time.Time)
	// articleDescCreatedAt is the schema descriptor for created_at field.
	articleDescCreatedAt := articleMixinFields2[0].Descriptor()
	// article.DefaultCreatedAt holds the default value on creation for the created_at field.
	article.DefaultCreatedAt = articleDescCreatedAt.Default.(func() time.Time)
	// articleDescID is the schema descriptor for id field.
	articleDescID := articleMixinFields0[0].Descriptor()
	// article.DefaultID holds the default value on creation for the id field.
	article.DefaultID = articleDescID.Default.(func() uuid.UUID)
	commentMixin := schema.Comment{}.Mixin()
	commentMixinFields0 := commentMixin[0].Fields()
	_ = commentMixinFields0
	commentMixinFields1 := commentMixin[1].Fields()
	_ = commentMixinFields1
	commentMixinFields2 := commentMixin[2].Fields()
	_ = commentMixinFields2
	commentFields := schema.Comment{}.Fields()
	_ = commentFields
	// commentDescUpdatedAt is the schema descriptor for updated_at field.
	commentDescUpdatedAt := commentMixinFields1[0].Descriptor()
	// comment.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	comment.DefaultUpdatedAt = commentDescUpdatedAt.Default.(func() time.Time)
	// comment.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	comment.UpdateDefaultUpdatedAt = commentDescUpdatedAt.UpdateDefault.(func() time.Time)
	// commentDescCreatedAt is the schema descriptor for created_at field.
	commentDescCreatedAt := commentMixinFields2[0].Descriptor()
	// comment.DefaultCreatedAt holds the default value on creation for the created_at field.
	comment.DefaultCreatedAt = commentDescCreatedAt.Default.(func() time.Time)
	// commentDescID is the schema descriptor for id field.
	commentDescID := commentMixinFields0[0].Descriptor()
	// comment.DefaultID holds the default value on creation for the id field.
	comment.DefaultID = commentDescID.Default.(func() uuid.UUID)
	metaMixin := schema.Meta{}.Mixin()
	metaMixinFields0 := metaMixin[0].Fields()
	_ = metaMixinFields0
	metaMixinFields1 := metaMixin[1].Fields()
	_ = metaMixinFields1
	metaMixinFields2 := metaMixin[2].Fields()
	_ = metaMixinFields2
	metaFields := schema.Meta{}.Fields()
	_ = metaFields
	// metaDescUpdatedAt is the schema descriptor for updated_at field.
	metaDescUpdatedAt := metaMixinFields1[0].Descriptor()
	// meta.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	meta.DefaultUpdatedAt = metaDescUpdatedAt.Default.(func() time.Time)
	// meta.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	meta.UpdateDefaultUpdatedAt = metaDescUpdatedAt.UpdateDefault.(func() time.Time)
	// metaDescCreatedAt is the schema descriptor for created_at field.
	metaDescCreatedAt := metaMixinFields2[0].Descriptor()
	// meta.DefaultCreatedAt holds the default value on creation for the created_at field.
	meta.DefaultCreatedAt = metaDescCreatedAt.Default.(func() time.Time)
	// metaDescID is the schema descriptor for id field.
	metaDescID := metaMixinFields0[0].Descriptor()
	// meta.DefaultID holds the default value on creation for the id field.
	meta.DefaultID = metaDescID.Default.(func() uuid.UUID)
	newsletterMixin := schema.Newsletter{}.Mixin()
	newsletterMixinFields0 := newsletterMixin[0].Fields()
	_ = newsletterMixinFields0
	newsletterMixinFields1 := newsletterMixin[1].Fields()
	_ = newsletterMixinFields1
	newsletterMixinFields2 := newsletterMixin[2].Fields()
	_ = newsletterMixinFields2
	newsletterFields := schema.Newsletter{}.Fields()
	_ = newsletterFields
	// newsletterDescUpdatedAt is the schema descriptor for updated_at field.
	newsletterDescUpdatedAt := newsletterMixinFields1[0].Descriptor()
	// newsletter.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	newsletter.DefaultUpdatedAt = newsletterDescUpdatedAt.Default.(func() time.Time)
	// newsletter.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	newsletter.UpdateDefaultUpdatedAt = newsletterDescUpdatedAt.UpdateDefault.(func() time.Time)
	// newsletterDescCreatedAt is the schema descriptor for created_at field.
	newsletterDescCreatedAt := newsletterMixinFields2[0].Descriptor()
	// newsletter.DefaultCreatedAt holds the default value on creation for the created_at field.
	newsletter.DefaultCreatedAt = newsletterDescCreatedAt.Default.(func() time.Time)
	// newsletterDescID is the schema descriptor for id field.
	newsletterDescID := newsletterMixinFields0[0].Descriptor()
	// newsletter.DefaultID holds the default value on creation for the id field.
	newsletter.DefaultID = newsletterDescID.Default.(func() uuid.UUID)
	userMixin := schema.User{}.Mixin()
	userMixinFields0 := userMixin[0].Fields()
	_ = userMixinFields0
	userMixinFields1 := userMixin[1].Fields()
	_ = userMixinFields1
	userMixinFields2 := userMixin[2].Fields()
	_ = userMixinFields2
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userMixinFields1[0].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(func() time.Time)
	// user.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	user.UpdateDefaultUpdatedAt = userDescUpdatedAt.UpdateDefault.(func() time.Time)
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userMixinFields2[0].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[0].Descriptor()
	// user.NameValidator is a validator for the "name" field. It is called by the builders before save.
	user.NameValidator = func() func(string) error {
		validators := userDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[1].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = func() func(string) error {
		validators := userDescEmail.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(email string) error {
			for _, fn := range fns {
				if err := fn(email); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescPassword is the schema descriptor for password field.
	userDescPassword := userFields[2].Descriptor()
	// user.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	user.PasswordValidator = func() func(string) error {
		validators := userDescPassword.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(password string) error {
			for _, fn := range fns {
				if err := fn(password); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescTokenExpired is the schema descriptor for token_expired field.
	userDescTokenExpired := userFields[5].Descriptor()
	// user.DefaultTokenExpired holds the default value on creation for the token_expired field.
	user.DefaultTokenExpired = userDescTokenExpired.Default.(time.Time)
	// userDescID is the schema descriptor for id field.
	userDescID := userMixinFields0[0].Descriptor()
	// user.DefaultID holds the default value on creation for the id field.
	user.DefaultID = userDescID.Default.(func() uuid.UUID)
}
