// Code generated by ent, DO NOT EDIT.

package ent

import (
	"app/ent/article"
	"app/ent/category"
	"app/ent/comment"
	"app/ent/gallery"
	"app/ent/metadata"
	"app/ent/newsletter"
	"app/ent/schema"
	"app/ent/tag"
	"app/ent/user"
	"time"

	"github.com/google/uuid"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	articleMixin := schema.Article{}.Mixin()
	articleMixinFields0 := articleMixin[0].Fields()
	_ = articleMixinFields0
	articleFields := schema.Article{}.Fields()
	_ = articleFields
	// articleDescTitle is the schema descriptor for title field.
	articleDescTitle := articleFields[0].Descriptor()
	// article.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	article.TitleValidator = func() func(string) error {
		validators := articleDescTitle.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(title string) error {
			for _, fn := range fns {
				if err := fn(title); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// articleDescSlug is the schema descriptor for slug field.
	articleDescSlug := articleFields[1].Descriptor()
	// article.SlugValidator is a validator for the "slug" field. It is called by the builders before save.
	article.SlugValidator = func() func(string) error {
		validators := articleDescSlug.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(slug string) error {
			for _, fn := range fns {
				if err := fn(slug); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// articleDescDescription is the schema descriptor for description field.
	articleDescDescription := articleFields[2].Descriptor()
	// article.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	article.DescriptionValidator = func() func(string) error {
		validators := articleDescDescription.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(description string) error {
			for _, fn := range fns {
				if err := fn(description); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// articleDescContent is the schema descriptor for content field.
	articleDescContent := articleFields[3].Descriptor()
	// article.ContentValidator is a validator for the "content" field. It is called by the builders before save.
	article.ContentValidator = func() func(string) error {
		validators := articleDescContent.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(content string) error {
			for _, fn := range fns {
				if err := fn(content); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// articleDescID is the schema descriptor for id field.
	articleDescID := articleMixinFields0[0].Descriptor()
	// article.DefaultID holds the default value on creation for the id field.
	article.DefaultID = articleDescID.Default.(func() uuid.UUID)
	categoryMixin := schema.Category{}.Mixin()
	categoryMixinFields0 := categoryMixin[0].Fields()
	_ = categoryMixinFields0
	categoryMixinFields1 := categoryMixin[1].Fields()
	_ = categoryMixinFields1
	categoryMixinFields2 := categoryMixin[2].Fields()
	_ = categoryMixinFields2
	categoryFields := schema.Category{}.Fields()
	_ = categoryFields
	// categoryDescCreatedAt is the schema descriptor for created_at field.
	categoryDescCreatedAt := categoryMixinFields1[0].Descriptor()
	// category.DefaultCreatedAt holds the default value on creation for the created_at field.
	category.DefaultCreatedAt = categoryDescCreatedAt.Default.(func() time.Time)
	// categoryDescUpdatedAt is the schema descriptor for updated_at field.
	categoryDescUpdatedAt := categoryMixinFields2[0].Descriptor()
	// category.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	category.DefaultUpdatedAt = categoryDescUpdatedAt.Default.(func() time.Time)
	// category.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	category.UpdateDefaultUpdatedAt = categoryDescUpdatedAt.UpdateDefault.(func() time.Time)
	// categoryDescName is the schema descriptor for name field.
	categoryDescName := categoryFields[0].Descriptor()
	// category.NameValidator is a validator for the "name" field. It is called by the builders before save.
	category.NameValidator = func() func(string) error {
		validators := categoryDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// categoryDescID is the schema descriptor for id field.
	categoryDescID := categoryMixinFields0[0].Descriptor()
	// category.DefaultID holds the default value on creation for the id field.
	category.DefaultID = categoryDescID.Default.(func() uuid.UUID)
	commentMixin := schema.Comment{}.Mixin()
	commentMixinFields0 := commentMixin[0].Fields()
	_ = commentMixinFields0
	commentMixinFields1 := commentMixin[1].Fields()
	_ = commentMixinFields1
	commentFields := schema.Comment{}.Fields()
	_ = commentFields
	// commentDescCreatedAt is the schema descriptor for created_at field.
	commentDescCreatedAt := commentMixinFields1[0].Descriptor()
	// comment.DefaultCreatedAt holds the default value on creation for the created_at field.
	comment.DefaultCreatedAt = commentDescCreatedAt.Default.(func() time.Time)
	// commentDescContent is the schema descriptor for content field.
	commentDescContent := commentFields[0].Descriptor()
	// comment.ContentValidator is a validator for the "content" field. It is called by the builders before save.
	comment.ContentValidator = func() func(string) error {
		validators := commentDescContent.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(content string) error {
			for _, fn := range fns {
				if err := fn(content); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// commentDescID is the schema descriptor for id field.
	commentDescID := commentMixinFields0[0].Descriptor()
	// comment.DefaultID holds the default value on creation for the id field.
	comment.DefaultID = commentDescID.Default.(func() uuid.UUID)
	galleryMixin := schema.Gallery{}.Mixin()
	galleryMixinFields0 := galleryMixin[0].Fields()
	_ = galleryMixinFields0
	galleryMixinFields1 := galleryMixin[1].Fields()
	_ = galleryMixinFields1
	galleryMixinFields2 := galleryMixin[2].Fields()
	_ = galleryMixinFields2
	galleryFields := schema.Gallery{}.Fields()
	_ = galleryFields
	// galleryDescCreatedAt is the schema descriptor for created_at field.
	galleryDescCreatedAt := galleryMixinFields1[0].Descriptor()
	// gallery.DefaultCreatedAt holds the default value on creation for the created_at field.
	gallery.DefaultCreatedAt = galleryDescCreatedAt.Default.(func() time.Time)
	// galleryDescUpdatedAt is the schema descriptor for updated_at field.
	galleryDescUpdatedAt := galleryMixinFields2[0].Descriptor()
	// gallery.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	gallery.DefaultUpdatedAt = galleryDescUpdatedAt.Default.(func() time.Time)
	// gallery.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	gallery.UpdateDefaultUpdatedAt = galleryDescUpdatedAt.UpdateDefault.(func() time.Time)
	// galleryDescName is the schema descriptor for name field.
	galleryDescName := galleryFields[0].Descriptor()
	// gallery.NameValidator is a validator for the "name" field. It is called by the builders before save.
	gallery.NameValidator = func() func(string) error {
		validators := galleryDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// galleryDescID is the schema descriptor for id field.
	galleryDescID := galleryMixinFields0[0].Descriptor()
	// gallery.DefaultID holds the default value on creation for the id field.
	gallery.DefaultID = galleryDescID.Default.(func() uuid.UUID)
	metadataMixin := schema.Metadata{}.Mixin()
	metadataMixinFields0 := metadataMixin[0].Fields()
	_ = metadataMixinFields0
	metadataMixinFields1 := metadataMixin[1].Fields()
	_ = metadataMixinFields1
	metadataMixinFields2 := metadataMixin[2].Fields()
	_ = metadataMixinFields2
	metadataFields := schema.Metadata{}.Fields()
	_ = metadataFields
	// metadataDescUpdatedAt is the schema descriptor for updated_at field.
	metadataDescUpdatedAt := metadataMixinFields1[0].Descriptor()
	// metadata.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	metadata.DefaultUpdatedAt = metadataDescUpdatedAt.Default.(func() time.Time)
	// metadata.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	metadata.UpdateDefaultUpdatedAt = metadataDescUpdatedAt.UpdateDefault.(func() time.Time)
	// metadataDescCreatedAt is the schema descriptor for created_at field.
	metadataDescCreatedAt := metadataMixinFields2[0].Descriptor()
	// metadata.DefaultCreatedAt holds the default value on creation for the created_at field.
	metadata.DefaultCreatedAt = metadataDescCreatedAt.Default.(func() time.Time)
	// metadataDescTitle is the schema descriptor for title field.
	metadataDescTitle := metadataFields[0].Descriptor()
	// metadata.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	metadata.TitleValidator = func() func(string) error {
		validators := metadataDescTitle.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(title string) error {
			for _, fn := range fns {
				if err := fn(title); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// metadataDescID is the schema descriptor for id field.
	metadataDescID := metadataMixinFields0[0].Descriptor()
	// metadata.DefaultID holds the default value on creation for the id field.
	metadata.DefaultID = metadataDescID.Default.(func() uuid.UUID)
	newsletterMixin := schema.Newsletter{}.Mixin()
	newsletterMixinFields0 := newsletterMixin[0].Fields()
	_ = newsletterMixinFields0
	newsletterMixinFields1 := newsletterMixin[1].Fields()
	_ = newsletterMixinFields1
	newsletterMixinFields2 := newsletterMixin[2].Fields()
	_ = newsletterMixinFields2
	newsletterFields := schema.Newsletter{}.Fields()
	_ = newsletterFields
	// newsletterDescUpdatedAt is the schema descriptor for updated_at field.
	newsletterDescUpdatedAt := newsletterMixinFields1[0].Descriptor()
	// newsletter.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	newsletter.DefaultUpdatedAt = newsletterDescUpdatedAt.Default.(func() time.Time)
	// newsletter.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	newsletter.UpdateDefaultUpdatedAt = newsletterDescUpdatedAt.UpdateDefault.(func() time.Time)
	// newsletterDescCreatedAt is the schema descriptor for created_at field.
	newsletterDescCreatedAt := newsletterMixinFields2[0].Descriptor()
	// newsletter.DefaultCreatedAt holds the default value on creation for the created_at field.
	newsletter.DefaultCreatedAt = newsletterDescCreatedAt.Default.(func() time.Time)
	// newsletterDescMessage is the schema descriptor for message field.
	newsletterDescMessage := newsletterFields[0].Descriptor()
	// newsletter.MessageValidator is a validator for the "message" field. It is called by the builders before save.
	newsletter.MessageValidator = func() func(string) error {
		validators := newsletterDescMessage.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(message string) error {
			for _, fn := range fns {
				if err := fn(message); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// newsletterDescID is the schema descriptor for id field.
	newsletterDescID := newsletterMixinFields0[0].Descriptor()
	// newsletter.DefaultID holds the default value on creation for the id field.
	newsletter.DefaultID = newsletterDescID.Default.(func() uuid.UUID)
	tagMixin := schema.Tag{}.Mixin()
	tagMixinFields0 := tagMixin[0].Fields()
	_ = tagMixinFields0
	tagMixinFields1 := tagMixin[1].Fields()
	_ = tagMixinFields1
	tagMixinFields2 := tagMixin[2].Fields()
	_ = tagMixinFields2
	tagFields := schema.Tag{}.Fields()
	_ = tagFields
	// tagDescCreatedAt is the schema descriptor for created_at field.
	tagDescCreatedAt := tagMixinFields1[0].Descriptor()
	// tag.DefaultCreatedAt holds the default value on creation for the created_at field.
	tag.DefaultCreatedAt = tagDescCreatedAt.Default.(func() time.Time)
	// tagDescUpdatedAt is the schema descriptor for updated_at field.
	tagDescUpdatedAt := tagMixinFields2[0].Descriptor()
	// tag.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	tag.DefaultUpdatedAt = tagDescUpdatedAt.Default.(func() time.Time)
	// tag.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	tag.UpdateDefaultUpdatedAt = tagDescUpdatedAt.UpdateDefault.(func() time.Time)
	// tagDescName is the schema descriptor for name field.
	tagDescName := tagFields[0].Descriptor()
	// tag.NameValidator is a validator for the "name" field. It is called by the builders before save.
	tag.NameValidator = func() func(string) error {
		validators := tagDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// tagDescID is the schema descriptor for id field.
	tagDescID := tagMixinFields0[0].Descriptor()
	// tag.DefaultID holds the default value on creation for the id field.
	tag.DefaultID = tagDescID.Default.(func() uuid.UUID)
	userMixin := schema.User{}.Mixin()
	userMixinFields0 := userMixin[0].Fields()
	_ = userMixinFields0
	userMixinFields1 := userMixin[1].Fields()
	_ = userMixinFields1
	userMixinFields2 := userMixin[2].Fields()
	_ = userMixinFields2
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userMixinFields1[0].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(func() time.Time)
	// user.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	user.UpdateDefaultUpdatedAt = userDescUpdatedAt.UpdateDefault.(func() time.Time)
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userMixinFields2[0].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[0].Descriptor()
	// user.NameValidator is a validator for the "name" field. It is called by the builders before save.
	user.NameValidator = func() func(string) error {
		validators := userDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[1].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = func() func(string) error {
		validators := userDescEmail.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(email string) error {
			for _, fn := range fns {
				if err := fn(email); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescPassword is the schema descriptor for password field.
	userDescPassword := userFields[2].Descriptor()
	// user.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	user.PasswordValidator = func() func(string) error {
		validators := userDescPassword.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(password string) error {
			for _, fn := range fns {
				if err := fn(password); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescTokenExpired is the schema descriptor for token_expired field.
	userDescTokenExpired := userFields[5].Descriptor()
	// user.DefaultTokenExpired holds the default value on creation for the token_expired field.
	user.DefaultTokenExpired = userDescTokenExpired.Default.(time.Time)
	// userDescID is the schema descriptor for id field.
	userDescID := userMixinFields0[0].Descriptor()
	// user.DefaultID holds the default value on creation for the id field.
	user.DefaultID = userDescID.Default.(func() uuid.UUID)
}
