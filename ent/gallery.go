// Code generated by ent, DO NOT EDIT.

package ent

import (
	"app/ent/gallery"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Gallery is the model entity for the Gallery schema.
type Gallery struct {
	config `json:"-"`
	// ID of the ent.
	// The unique identifier of the entity.
	ID uuid.UUID `json:"id,omitempty"`
	// The time when the entity was created.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// The time when the entity was updated.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// The tag's name.
	Name string `json:"name,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Gallery) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case gallery.FieldName:
			values[i] = new(sql.NullString)
		case gallery.FieldCreatedAt, gallery.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case gallery.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Gallery", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Gallery fields.
func (ga *Gallery) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case gallery.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ga.ID = *value
			}
		case gallery.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ga.CreatedAt = value.Time
			}
		case gallery.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ga.UpdatedAt = value.Time
			}
		case gallery.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ga.Name = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Gallery.
// Note that you need to call Gallery.Unwrap() before calling this method if this Gallery
// was returned from a transaction, and the transaction was committed or rolled back.
func (ga *Gallery) Update() *GalleryUpdateOne {
	return NewGalleryClient(ga.config).UpdateOne(ga)
}

// Unwrap unwraps the Gallery entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ga *Gallery) Unwrap() *Gallery {
	_tx, ok := ga.config.driver.(*txDriver)
	if !ok {
		panic("ent: Gallery is not a transactional entity")
	}
	ga.config.driver = _tx.drv
	return ga
}

// String implements the fmt.Stringer.
func (ga *Gallery) String() string {
	var builder strings.Builder
	builder.WriteString("Gallery(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ga.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ga.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ga.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ga.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Galleries is a parsable slice of Gallery.
type Galleries []*Gallery
